#!/bin/bash
# Strict mode
set -euo pipefail
set +x
trap 'echo "Interrupted, exiting..." >&2; exit 1' INT TERM

# Constants
readonly LITE_DEPTH=30000
readonly BUCKET_NAME="{{ aws.bucket_name }}"
readonly SNAPSHOT_BASE_URL="https://${BUCKET_NAME}.chainsafe.dev"
export JOB_NAME="download-snapshots"

source /scripts/helpers.sh
source /scripts/metrics.sh

fetch_snapshot_name() {
  local height="$1"
  local base="${SNAPSHOT_BASE_URL}/list/$CHAIN/lite"
  local snapshot_pattern="forest_snapshot_${CHAIN}_[0-9-]+_height_${height}\.forest\.car\.zst"

  local snapshot_name
  snapshot_name=$(curl -s "$base" | grep -oE "$snapshot_pattern" | head -n1)
  if [[ -z "$snapshot_name" ]]; then
    error "Error: No snapshot found for height ${height}"
  fi
  echo "${snapshot_name}"
}

download_snapshot() {
  local file="$1"
  local destination="$2"

  info "Downloading ${file}"
  local start_time=${SECONDS}
  if aws s3 cp \
    --cli-read-timeout 300 \
    --cli-connect-timeout 60 \
    "s3://${BUCKET_NAME}/${CHAIN}/lite/${file}" \
    "${destination}"; then
      info "Successfully downloaded snapshot ${file}"
  else
    warning "Download snapshot ${file} failed with awscli, retrying with curl"
    pushd "$(dirname "${destination}")"
    if curl -fLC - -O --retry 10 --retry-delay 5 \
        "${SNAPSHOT_BASE_URL}/archive/forest/${CHAIN}/lite/${file}"; then
      info "Successfully downloaded snapshot ${file} with curl"
    else
      increment_failure_counter
      return 1
    fi
    popd
  fi
  local duration=$((SECONDS - start_time))
  increment_success_counter
  update_download_duration "$duration"
  return 0
}

process_snapshot() {
  local current_epoch="$1"
  local snapshot_name
  local snapshot
  local snapshot_hash
  snapshot_name=$(fetch_snapshot_name "$current_epoch")
  snapshot="${LITE_SNAPSHOT_DIR}/${snapshot_name}"
  snapshot_hash="${snapshot}.sha256sum"
  if download_snapshot "${snapshot_name}" "${snapshot}"; then
    sha256sum "${snapshot}" >"${snapshot_hash}"

    # Store validated height in cache
    rabbit_produce "downloaded" "${current_epoch}"
    aws s3 cp "${snapshot_hash}" "s3://${BUCKET_NAME}/${CHAIN}/lite/"
  else
    rabbit_produce "downloaded-failed" "${current_epoch}"
    error "Failed to download ${snapshot_name}"
  fi
}

process_epochs() {
  local last_downloaded_epoch="$1"
  local full_start_time=${SECONDS}
  local current=$((last_downloaded_epoch + LITE_DEPTH))
  update_total_epochs_metric "$END_EPOCH"

  while [ "${current}" -le "${END_EPOCH}" ]; do
    local batch_start_time=${SECONDS}
    local batch_end=$((current + LITE_DEPTH))
    info "Downloading epochs ${current} to ${batch_end} on ${CHAIN}"

    update_progress_metric "$current"
    process_snapshot "$current"
    local progress
    progress=$(progress_info "$current" "${END_EPOCH}" "$LITE_DEPTH" "$full_start_time" "$batch_start_time")
    info "${progress}"
    current=$((current + LITE_DEPTH))
  done
}

main() {
  setup_metrics
  start_metrics_server

  rabbit_setup "downloaded"
  local last_downloaded_epoch
  last_downloaded_epoch=$(rabbit_consume_latest_with_default "downloaded" "{{ forest.download_snapshots.start_epoch }}")
  last_downloaded_epoch=$((last_downloaded_epoch - (last_downloaded_epoch % LITE_DEPTH)))

  init_folders
  process_epochs "${last_downloaded_epoch}"
}

main
