#!/bin/bash
# Strict mode
set -euo pipefail
set +x
trap 'echo "Interrupted, exiting..." >&2; exit 1' INT TERM

# Constants
readonly SECONDS_PER_EPOCH=30
readonly LITE_DEPTH=30000
readonly DIFF_DEPTH=3000
export JOB_NAME="upload-snapshots"

source /scripts/helpers.sh
source /scripts/metrics.sh

aws_upload_snapshot() {
  local file="$1"
  local destination="$2"

  if aws s3 cp \
    --cli-read-timeout 300 \
    --cli-connect-timeout 60 \
    "${file}" "s3://forest-archive/${CHAIN}/${destination}/"; then
      aws s3 cp \
        "${file}.sha256sum" "s3://forest-archive/${CHAIN}/${destination}/"
      info "Snapshot ${file} uploaded"
      increment_success_counter
      return 0
  else
    warning "Snapshot ${file} failed"
    increment_failure_counter
    return 1
  fi
}

upload_lite_snapshot() {
  local current_epoch="$1"
  local lite_snapshot=$(
    find ${LITE_SNAPSHOT_DIR}  -type f \
      -regex ".*forest_snapshot_${CHAIN}_[0-9-]+_height_${current_epoch}\.forest\.car\.zst$" | \
      head -n1
  )
  if [[ ! -f "${lite_snapshot}" ]]; then
    warning "Could not find Lite snapshot(${lite_snapshot}) for epoch ${current_epoch}"
    return 0
  fi

  info "Uploading Lite snapshot: ${lite_snapshot}"
  local start_time=${SECONDS}
  if aws_upload_snapshot "${lite_snapshot}" "lite"; then
    update_upload_duration $((SECONDS - start_time))
  else
    local error_message="Failed to upload ${lite_snapshot}"
    rabbit_produce "uploaded-failed" "${current_epoch}"
    slack_notify "${error_message}" "failed"
    error "${error_message}"
  fi
}

upload_diff_snapshots() {
  local current_epoch="$1"
  local diff_snapshot
  local diff_epoch
  local diff_epoch_start
  local diff_epoch_date_str
  local epoch_start=$((current_epoch - LITE_DEPTH))
  for (( i = 1; i <= 9; i++ )); do
    diff_epoch=$((epoch_start + DIFF_DEPTH * i))
    diff_epoch_start=$((diff_epoch - DIFF_DEPTH))
    diff_epoch_date_str=$(date -uI -d "@$((GENESIS_TIMESTAMP + diff_epoch * SECONDS_PER_EPOCH))")
    diff_snapshot="${DIFF_SNAPSHOT_DIR}/forest_diff_${CHAIN}_${diff_epoch_date_str}_height_${diff_epoch_start}+${DIFF_DEPTH}.forest.car.zst"
    if [[ ! -f "${diff_snapshot}" ]]; then
      warning "Could not find Diff snapshot (${diff_snapshot}) for epoch ${current_epoch}"
      continue
    fi
    info "Uploading Diff snapshot: ${diff_snapshot}"
    local start_time=${SECONDS}
    if aws_upload_snapshot "${diff_snapshot}" "diff"; then
      update_upload_duration $((SECONDS - start_time))
    else
      local error_message="Failed to upload ${diff_snapshot}"
      rabbit_produce "uploaded-failed" "${diff_snapshot}"
      slack_notify "${error_message}" "failed"
      error "${error_message}"
    fi
  done
}

upload_snapshots() {
  local current_epoch="$1"
  local start_time=${SECONDS}
  upload_lite_snapshot "${current_epoch}"
  upload_diff_snapshots "${current_epoch}"

  rabbit_produce "uploaded" "${current}"
  info "Snapshots upload succeed. Took $(secs_to_dhms $((SECONDS - start_time)))"
}

clean() {
  local current="$1"
  info "Cleanup "
  # rm -f "${FULL_SNAPSHOTS_DIR}/forest_snapshot_${CHAIN}_height_${current}.forest.car.zst"
}

process_epochs() {
  local last_uploaded_epoch="$1"
  local last_snapshoted_epoch
  local full_start_time=${SECONDS}
  local current=$((last_uploaded_epoch + LITE_DEPTH))
  update_total_epochs_metric "$END_EPOCH"

  while true; do
    last_snapshoted_epoch=$(rabbit_consume_latest_with_default "created" "{{ forest.build_snapshots.start_epoch }}")

    if ((last_snapshoted_epoch >= current)); then
      local batch_start_time=${SECONDS}
      local batch_start=$((current + LITE_DEPTH))
      info "Processing epochs ${batch_start} to ${current} on ${CHAIN}"

      update_progress_metric "$current"
      upload_snapshots "$current"
      clean "$current"

      info "$(progress_info "$current" "${END_EPOCH}" "$LITE_DEPTH" "$full_start_time" "$batch_start_time")"
      current=$((current + LITE_DEPTH))
      continue
    else
      warning "Epoch ${current} is not built yet. Waiting 30 minutes ..."
      sleep $((60*30))
    fi
  done
}

main() {
  setup_metrics
  start_metrics_server

  rabbit_setup "uploaded"
  local last_uploaded_epoch
  last_uploaded_epoch=$(rabbit_consume_latest_with_default "uploaded" "{{ forest.upload_snapshots.start_epoch }}")

  init_folders
  process_epochs "${last_uploaded_epoch}"
}
main
